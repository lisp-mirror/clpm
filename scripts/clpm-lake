#!/bin/sh
":" ; exec sbcl --script "$0" "$@"           # -*- mode: common-lisp; -*-
;;;; Script to run lake using CLPM's submodules
;;;;
;;;; This software is part of CLPM. See README.org for more information. See
;;;; LICENSE for license information.

(in-package #:cl-user)

(require :asdf)

(defvar *setup-file-pathname* *load-truename*
  "The pathname to this file.")

(defvar *root-pathname* (uiop:pathname-parent-directory-pathname
                         (uiop:pathname-directory-pathname *setup-file-pathname*))
  "The pathname to the root directory of the CLPM release being built.")

(defvar *build-root-pathname* (merge-pathnames "build/"
                                               *root-pathname*)
  "The pathname to the root of the build directory. Defaults to build/ inside
*ROOT-PATHNAME*")

(defun setup-asdf ()
  (let ((build-cache (merge-pathnames "cl-cache/" *build-root-pathname*)))
    (asdf:clear-configuration)
    (asdf:initialize-source-registry `(:source-registry
                                       :ignore-inherited-configuration
                                       (:tree ,*root-pathname*)))))

(setup-asdf)

(let ((*standard-output* (make-broadcast-stream))
      (*error-output* (make-broadcast-stream)))
  (asdf:load-system :adopt)
  (asdf:load-system :cl-semver)
  (asdf:load-system :lake))

(defparameter *option-help*
  (adopt:make-option
   :help
   :help "Print this help text and exit"
   :short #\h
   :long "help"
   :reduce (constantly t)))

(defparameter *option-file*
  (adopt:make-option
   :file
   :help "Use FILE as a Lakefile"
   :short #\f
   :parameter "FILE"
   :reduce #'adopt:last))

(defparameter *option-parallel*
  (adopt:make-option
   :parallel
   :help "Run N tasks in parallel"
   :short #\j
   :parameter "N"
   :reduce #'adopt:last
   :key #'parse-integer))

(defparameter *option-verbose*
  (adopt:make-option
   :verbose-p
   :help "Run in verbose mode"
   :short #\v
   :reduce (constantly t)))

(defparameter *option-list*
  (adopt:make-option
   :list
   :help "List the available tasks"
   :short #\l
   :reduce (constantly t)))

(defparameter *ui*
  (adopt:make-interface
   :name "clpm-lake"
   :summary "Run Lake using the bundled libraries"
   :help "Run Lake using the bundled libraries"
   :usage "[options] [target*]"
   :contents (list *option-help*
                   *option-file*
                   *option-parallel*
                   *option-verbose*
                   *option-list*)))

(defun main ()
  (multiple-value-bind (arguments options)
      (adopt:parse-options *ui*)
    (when (gethash :help options)
      (adopt:print-help-and-exit *ui* :program-name "clpm-lake"))
    (let* ((lakefile (gethash :file options))
           (jobs (gethash :parallel options))
           (params `(:verbose ,(gethash :verbose-p options)
                              ,@(when jobs
                                  `(:jobs ,jobs))
                              ,@(when lakefile
                                  `(:pathname ,lakefile)))))
      (when (gethash :list options)
        (lake:display-tasks)
        (uiop:quit))
      (if arguments
          (dolist (target arguments)
            (apply #'lake:lake :target target params))
          (apply #'lake:lake params)))))

(main)
