;;;; -*- mode: common-lisp; -*-
;;;; CLPM Lakefile (like make, but in Lisp!)
;;;;
;;;; This software is part of CLPM. See README.org for more information. See
;;;; LICENSE for license information.

(in-package :cl-user)
(defpackage :clpm/lake
  (:use :cl :lake :cl-syntax :cl-semver)
  (:shadowing-import-from :lake
                          :directory))
(in-package :clpm/lake)

(defvar *lakefile-truename* *load-truename*)

(use-syntax :interpol)



(defun git-tag (&optional (ref "HEAD"))
  (uiop:run-program `("git" "describe" "--tags" ,ref)
                    :output '(:string :stripped t)))

(defun git-tag-p ()
  (zerop (nth-value 2 (uiop:run-program '("git" "describe" "--tags" "--exact-match" "HEAD")
                                        :ignore-error-status t))))

(defun git-branch-name ()
  (uiop:run-program '("git" "rev-parse" "--abbrev-ref" "HEAD")
                    :output '(:string :stripped t)))

(defun git-common-ancestor ()
  (uiop:run-program '("git" "merge-base" "HEAD" "master")
                    :output '(:string :stripped t)))

(defun git-describe (&optional (ref "HEAD"))
  (uiop:split-string
   (uiop:run-program `("git" "describe" "--tags" "--match" "v*" ,ref)
                     :output '(:string :stripped t))
   :max 3
   :separator '(#\-)))

(defun git-dirty-p ()
  (not (zerop (nth-value 2 (uiop:run-program '("git" "diff-index" "--quiet" "HEAD")
                                             :ignore-error-status t)))))

(defun git-distance-from-master ()
  (parse-integer (uiop:run-program '("git" "rev-list" "--count" "HEAD" "--not" "master")
                                   :output '(:string :stripped t))))
(defun base-version ()
  (uiop:read-file-form (merge-pathnames "clpm/version.lisp" *lakefile-truename*)
                       :at '(3 2)))

(defun clpm-version (&key ignore-dirty-p)
  (let ((git-branch-name (git-branch-name))
        (git-describe (git-describe))
        (git-dirty-p (and (not ignore-dirty-p) (git-dirty-p)))
        (base-version-string (base-version)))
    (if (git-tag-p)
        ;; This is a tagged version, just return the base version number.
        base-version-string
        ;; Otherwise, assemble a version string.
        (let* ((semver (read-version-from-string base-version-string))
               (prerelease-category (or (version-pre-release semver) 0)))
          (if (equal git-branch-name "master")
              (format nil "~A.~A.~A-~A.~A+~A~:[~;-dirty~]"
                      (version-major semver) (version-minor semver) (version-patch semver)
                      prerelease-category (second git-describe) (third git-describe)
                      git-dirty-p)
              (let* ((ancestor (git-common-ancestor))
                     (ancestor-describe (git-describe ancestor))
                     (distance-from-master (git-distance-from-master)))
                (format nil "~A.~A.~A-~A.~A.0.~A.~A+~A~:[~;-dirty~]"
                        (version-major semver) (version-minor semver) (version-patch semver)
                        prerelease-category (second ancestor-describe) git-branch-name distance-from-master
                        (third git-describe) git-dirty-p)))))))


;; * Docker
;; ** Helper Functions

(defun docker-build (tuple path
                     &key tag dockerfile context
                       iid-file platform build-args)

  (apply #'uiop:run-program
         `("docker"
           ,@(when context
               (list #?"--context=${context}"))
           "build"
           ,@(when platform
               `("--platform" ,platform))
           ,@(when tag
               `("-t" ,tag))
           ,@(when dockerfile
               `("-f" ,dockerfile))
           ,@(when iid-file
               `("--iidfile" ,iid-file))
           ,@(mapcan (lambda (cell)
                       (list "--build-arg" #?"${(car cell)}=${(cdr cell)}"))
                     build-args)
           ,path)
         :output :interactive
         :error-output :interactive
         :input :interactive

         (when (and (equal (second tuple) "windows")
                    (uiop:getenv "DOCKER_BUILDKIT"))
           ;; Docker on windows does not support buildkit yet, so disable it.
           (list :environment
                 (list* "DOCKER_BUILDKIT=0"
                        (sb-ext:posix-environ))))))

(defun docker-create (image
                      &key cid-file context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "create"
     ,@(when cid-file
         `("--cidfile" ,cid-file))
     ,image)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-cp (source-container source-path destination-path
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "cp"
     ,#?"${source-container}:${source-path}"
     ,destination-path)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun docker-rm (container
                  &key context)
  (uiop:run-program
   `("docker"
     ,@(when context
         (list #?"--context=${context}"))
     "rm"
     ,container)
   :output :interactive
   :error-output :interactive
   :input :interactive))

(defun build-clpm-with-docker (tuple ref &key dockerfile context platform)
  (let ((output-dir (merge-pathnames #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/"
                                     (uiop:getcwd))))
    (ensure-directories-exist output-dir)
    (uiop:with-temporary-file (:pathname iid-pn)
      (uiop:with-temporary-file (:pathname cid-pn)
        (uiop:delete-file-if-exists iid-pn)
        (uiop:delete-file-if-exists cid-pn)
        (docker-build tuple
                      "."
                      :dockerfile dockerfile
                      :context context
                      :platform platform
                      :iid-file (namestring iid-pn)
                      :build-args (list (cons "ref" ref)
                                        (cons "describe" (git-tag ref))))
        (let ((iid (uiop:read-file-string iid-pn)))
          (docker-create iid
                         :cid-file (namestring cid-pn)
                         :context context)
          (let ((cid (uiop:read-file-string cid-pn)))
            (if (equal (second tuple) "windows")
                (docker-cp cid #?"C:/clpm-${(git-tag ref)}/build/clpm.msi"
                           (namestring (merge-pathnames (format nil "clpm-~{~A~^-~}-v~A.msi" tuple (clpm-version :ignore-dirty-p t))
                                                        output-dir))
                           :context context)
                (docker-cp cid #?"/clpm-${(git-tag ref)}/build/clpm.tar.gz"
                           (namestring (merge-pathnames (format nil "clpm-~{~A~^-~}-v~A.tar.gz" tuple (clpm-version :ignore-dirty-p t))
                                                        output-dir))
                           :context context))
            (docker-rm cid
                       :context context)))))))

;; ** Tasks

(defparameter *docker-default-config*
  '((("amd64" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("amd64" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine")

    (("amd64" "windows")
     :dockerfile "docker/Dockerfile.windows")

    (("armv7" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("armv7" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine")

    (("arm64" "linux" "gnu")
     :dockerfile "docker/Dockerfile.ubuntu")

    (("arm64" "linux" "musl")
     :dockerfile "docker/Dockerfile.alpine"))
  "Alist of tuples defining Docker containers that can be used to build CLPM
  that map to a plist of default options.")

(defvar *docker-config* nil
  "Stores the docker config computed at runtime from the
  .clpm-docker-build-config file.")

(defvar *docker-build-tasks* nil
  "A list of task names for building CLPM in Docker containers.")

(defun load-docker-build-config ()
  (when (probe-file ".clpm-docker-build-config")
    (let ((forms (uiop:read-file-forms ".clpm-docker-build-config")))
      (loop
        :for form :in forms
        :for default-form := (assoc (car form) *docker-default-config* :test #'equal)
        :when default-form
          :collect (cons (car form)
                         (append (cdr form) (cdr default-form)))))))

(setf *docker-config* (load-docker-build-config))

(defun make-docker-build-task (tuple)
  "Given a tuple, make a Lake task to build CLPM in the Docker container
specified by the tuple."
  (let ((task-name (format nil "docker-build-~{~A~^-~}" tuple)))
    `(progn
       (pushnew ,task-name *docker-build-tasks* :test #'equal)
       (task (,task-name (ref "master")) ()
         ,(format nil "Build CLPM in a docker container for ~{~A~^ ~}" tuple)
         (let* ((overrides-cell (assoc ',tuple *docker-config* :test #'equal))
                (plist (cdr overrides-cell))
                (default-plist (cdr (assoc ',tuple *docker-default-config*))))
           (when overrides-cell
             (apply #'build-clpm-with-docker ',tuple ref (append plist default-plist))))))))

(defmacro make-docker-build-tasks ()
  "Make tasks for all tuples defined in *DOCKER-DEFAULT-CONFIG*"
  `(progn
     ,@(loop
         :for f :in *docker-default-config*
         :collect (make-docker-build-task (car f)))))

(defmacro make-docker-parent-task ()
  "Make a Lake task that depends on all individual Docker build tasks."
  `(task ("docker-build") ,*docker-build-tasks*
     "Build CLPM using all configured Docker containers"
     t))

(make-docker-build-tasks)
(make-docker-parent-task)


;; * Releasing



(namespace "release"
  (task "all" ("files")
    "Prepare for release")

  (task "dir" ()
    "Ensure release directory exists"
    (ensure-directories-exist (merge-pathnames #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/"
                                               (uiop:getcwd))))

  (task "digests" ("dir")
    "Generate a digests file for every file in the release directory"
    (ensure-directories-exist (merge-pathnames #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/"
                                               (uiop:getcwd)))
    (uiop:delete-file-if-exists #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/clpm-v${(clpm-version :ignore-dirty-p t)}.DIGESTS")
    (let ((files (uiop:directory* (merge-pathnames #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/*.*"))))
      (with-open-file (s #?"build/releases/v${(clpm-version :ignore-dirty-p t)}/clpm-v${(clpm-version :ignore-dirty-p t)}.DIGESTS"
                         :direction :output)
        (write-line "The SHA512 checksums of the following files are:" s)
        (terpri s))
      (loop
        :for file :in files
        :do
           (uiop:with-current-directory (#?"build/releases/v${(clpm-version :ignore-dirty-p t)}/")
             (uiop:run-program (list "sha512sum"
                                     (namestring (uiop:make-pathname*
                                                  :name (pathname-name file)
                                                  :type (pathname-type file))))
                               :output #?"clpm-v${(clpm-version :ignore-dirty-p t)}.DIGESTS"
                               :if-output-exists :append
                               :error-output :interactive
                               :input :interactive))))))

(task "build" ()
  "Build CLPM"
  (sh "sbcl --no-sysinit --no-userinit --script scripts/build.lisp"))

(task "package" ()
  "Package CLPM"
  (sh "/bin/sh package.sh"))

(task "all" ("build"))

(task "default" ("all"))

(task "version" ()
      (echo (clpm-version)))
