variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ALPINE_VERSION: "3.13"
  ASDF_VERSION: 3.3.4
  SBCL_VERSION: 2.1.1
  DOCKER_HUB_CI_REPO: daewok/clpm-ci

image: clfoundation/sbcl:$SBCL_VERSION-alpine$ALPINE_VERSION

stages:
  - prep

##############################################################################
# Build CI Images
##############################################################################

# Build the image used for making the executable.
ci-image:amd64:
  stage: prep
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_HUB_USERNAME\",\"password\":\"$DOCKER_HUB_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache --cache-repo $DOCKER_HUB_CI_REPO --context $CI_PROJECT_DIR --build-arg asdf_version=$ASDF_VERSION --build-arg sbcl_version=$SBCL_VERSION --build-arg alpine_version=$ALPINE_VERSION --dockerfile $CI_PROJECT_DIR/Dockerfile.sbcl-ci --destination $DOCKER_HUB_CI_REPO:$SBCL_VERSION-alpine$ALPINE_VERSION-asdf$ASDF_VERSION-amd64

##############################################################################
# Build static executables
##############################################################################

.static-exec:
  stage: build
  image: $DOCKER_HUB_CI_REPO:$SBCL_VERSION-alpine$ALPINE_VERSION-asdf$ASDF_VERSION-$ARCH
  script:
    - apk add --no-cache openssl-dev openssl-libs-static
    - mkdir -p $BUILD_DIR
    - mkdir -p $RELEASE_DIR
    - sbcl --script scripts/build-core.lisp
    # Dump linkage info.
    - cd /usr/local/src/sbcl-$SBCL_VERSION
    - |
      sbcl --core $CI_PROJECT_DIR/$BUILD_DIR/$CI_PROJECT_NAME.core \
           --non-interactive \
           --load tools-for-build/dump-linkage-info.lisp \
           --eval "(sb-dump-linkage-info:dump-to-file \"$CI_PROJECT_DIR/$BUILD_DIR/linkage-info.sexp\")"
    # Create the linkage table override info.
    - sbcl --script tools-for-build/create-linkage-table-prefill-info-override.lisp "$CI_PROJECT_DIR/$BUILD_DIR/linkage-info.sexp"
    # Build the static runtime.
    - LDLIBS="-lssl" make -C src/runtime static-sbcl
    # Redump the core, this time as an executable.
    - |
      src/runtime/static-sbcl --core $CI_PROJECT_DIR/$BUILD_DIR/$CI_PROJECT_NAME.core \
                              --non-interactive \
                              --eval "(sb-ext:save-lisp-and-die \"$CI_PROJECT_DIR/$RELEASE_DIR/$CI_PROJECT_NAME\" :executable t :toplevel #'uiop:restore-image :compression t :save-runtime-options t)"
  artifacts:
    paths:
      - $BUILD_DIR
      - $RELEASE_DIR

static-exec:linux:amd64:
  extends: .static-exec
  variables:
    ARCH: amd64
    BUILD_DIR: build/linux-amd64
    RELEASE_DIR: build/release/linux-amd64
  needs:
    - ci-image:amd64

# build-glibc:
#   image:
#     name: daewok/sbcl:1.5.2-debian-build
#     entrypoint: [""]
#   stage: build
#   script:
#     - apt-get update
#     - apt-get install -y libssl1.0-dev libsqlite3-dev
#     - echo "(lambda (list) (pushnew :sb-core-compression list) (pushnew :sb-dynamic-core list) (pushnew :sb-linkable-runtime list) list)" > /usr/local/src/sbcl-${SBCL_VERSION}/customize-target-features.lisp
#     - rebuild-sbcl
#     - sbcl --script scripts/build-static.lisp
#     - sbcl --script scripts/build-dynamic.lisp
#     - rm -rf build/cl-cache
#     - mv build build-glibc

# build-musl:
#   image:
#     name: daewok/sbcl:1.5.2-alpine-build
#     entrypoint: [""]
#   stage: build
#   script:
#     - apk add openssl-dev sqlite-static sqlite-dev
#     - echo "(lambda (list) (pushnew :sb-core-compression list) (pushnew :sb-dynamic-core list) (pushnew :sb-linkable-runtime list) list)" > /usr/local/src/sbcl-${SBCL_VERSION}/customize-target-features.lisp
#     - rebuild-sbcl
#     - sbcl --script scripts/build-static.lisp
#     - sbcl --script scripts/build-dynamic.lisp
#     - rm -rf build/cl-cache
#     - mv build build-musl

# release-glibc:
#   stage: deploy
#   variables:
#     GIT_SUBMODULE_STRATEGY: none
#   script:
#     - mv build-glibc/bin/clpm clpm
#   artifacts:
#     name: clpm-${CI_COMMIT_TAG}-linux-gnu
#     paths:
#       - clpm
#   only:
#     - tags

# release-musl:
#   stage: deploy
#   variables:
#     GIT_SUBMODULE_STRATEGY: none
#   script:
#     - mv build-musl/bin/clpm clpm
#   artifacts:
#     name: clpm-${CI_COMMIT_TAG}-linux-musl
#     paths:
#       - clpm
#   only:
#     - tags
