;;;; clpm client rc
;;;;
;;;; This software is part of CLPM. See README.org for more information. See
;;;; LICENSE for license information.

(uiop:define-package #:clpm-cli/commands/client/rc
    (:use #:cl
          #:clpm-cli/common-args
          #:clpm-cli/commands/client/common
          #:clpm-cli/interface-defs
          #:named-readtables)
  (:import-from #:uiop
                #:*stdout*)
  (:import-from #:cl-interpol)
  (:import-from #:clpm))

(in-package #:clpm-cli/commands/client/rc)

(in-readtable :interpol-syntax)

(defparameter *option-quicklisp-alternative*
  (adopt:make-option
   :quicklisp-alternative
   :long "quicklisp-alternative"
   :help "Print configuration as a Quicklisp alternative."
   :reduce (constantly t)))

(defparameter *client-rc-ui*
  (adopt:make-interface
   :name "clpm client rc"
   :summary "Common Lisp Project Manager"
   :usage "client rc [options]"
   :help "Common Lisp Project Manager"
   :contents (list *group-common*
                   *option-quicklisp-alternative*)))

(defun quicklisp-alternative-rc ()
  #?";;; Use CLPM as a quicklisp alternative (missing systems are silently installed
;;; on demand and not extra steps need to be taken to turn it on).
;;;
;;; Generated by CLPM ${(clpm:clpm-version)}

(require \"asdf\")
#-clpm-client
(when (asdf:find-system \"clpm-client\" nil)
  ;; Load the CLPM client if we can find it.
  (asdf:load-system \"clpm-client\")
  (flet ((maybe-set-symbol-value (sym value)
           (uiop:if-let ((sym (uiop:find-symbol* sym :clpm-client nil)))
             (setf (symbol-value sym) value))))
    ;; Do not prompt before attempting to install a missing system.
    (maybe-set-symbol-value '#:*asdf-system-not-found-behavior* :install)
    ;; Accept any diffs without prompting.
    (maybe-set-symbol-value '#:*context-diff-approval-method* t))
  (if (uiop:symbol-call :clpm-client '#:active-context)
      ;; If started inside a context (i.e., with `clpm exec` or `clpm bundle exec`),
      ;; activate ASDF integration
      (uiop:symbol-call :clpm-client '#:activate-asdf-integration)
      ;; Otherwise, activate the default context and ASDF integration.
      (uiop:symbol-call :clpm-client '#:activate-context \"default\" :activate-asdf-integration t)))")

(defun default-rc ()
  #?";;; Use CLPM with default configuration.
;;;
;;; Generated by CLPM ${(clpm:clpm-version)}

(require \"asdf\")
#-clpm-client
(when (asdf:find-system \"clpm-client\" nil)
  ;; Load the CLPM client if we can find it.
  (asdf:load-system \"clpm-client\")
  (when (uiop:symbol-call :clpm-client '#:active-context)
    ;; If started inside a context (i.e., with `clpm exec` or `clpm bundle exec`),
    ;; activate ASDF integration
    (uiop:symbol-call :clpm-client '#:activate-asdf-integration)))")

(define-cli-command (("client" "rc") *client-rc-ui*) (args options)
  (declare (ignore args))
  (uiop:with-safe-io-syntax ()
    (let ((*print-case* :downcase))
      (if (gethash :quicklisp-alternative options)
          (write-string (quicklisp-alternative-rc) *stdout*)
          (write-string (default-rc) *stdout*))
      (terpri *stdout*)))
  t)
